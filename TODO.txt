Next:

Restructure stories query:
	- Story.most_recent(difficulty="all")
		- returns a list of 50 most_recent stories according to difficulty
		- when a new story is added the difficulty="all" and the difficulty of the story are updated
	- Story.unanswered(difficulty="all")
		- returns a list of 50 most_recent stories which have unanswered questions according to difficulty
		- when a new question is asked (if the story doesn't already have a new Q) or when a lone answer
		is deleted we update the "all" and difficulty of story queries.
	- At the front page:
		- I will have to get rid of the red Q
	

Testing:
	- It might be worth trying the new type of S.f = classmethod(f)
	- Test my memcached decorator against the actual queries I'm going to do before inserting everywhere.

CACHING:
	- stories
	- mydesk
	- readstory
	- Make sure I'm updating at all the appropriate times (e.g. when adding a story)


main.py:
	- cache every commonly-used query.
	- figure out how to use logging so that I can debug after shipping

Create Footer:
	Welcome/About/Feedback/Bugs:
	- create a welcome page for not-logged-in users and a front page

General:
	- Make favicon (a white lobster H with red backdrop)
	- How to edit stories?
	- How to prevent spam?

	
		
		
		
Ideas for the 2nd launch:
	big ideas:
	- AUDIO with soundcloud
	- Leaderboard and student stats
	- Add dictionary-lookup capability somehow
	
	little things:
	- add location property to questions
	- scroll to answer after submitting an answer
	

	

	
Cron jobs to run:
	- Delete vocab which isn't being referred to.
	- Update all the thanks at the end of the day and keep track of increment in memcache.
	
	
	

random old stuff:

