Next:
	- On addstory.html I should require the author of the story.

CACHING:
	- readstory
		- Do the Question and Answer queries.
		- Do the StoryExtras queries.
		- Do the vocablist/vocab queries.  Should I cache vocab? and How?
		
	- mydesk
	- Make sure I'm updating at all the appropriate times (e.g. when adding a story)

Create Footer:
	Welcome/About/Feedback/Bugs:
	- create a welcome page for not-logged-in users and a front page

General:
	- Make favicon (a white lobster H with red backdrop)
	- figure out how to use logging so that I can debug after shipping
	- How to edit stories?
	- How to prevent spam?



Lesson learned:
	- The ancestor query is what allows for consistency between entity groups. I tried to add a question to the
	database and then call Story_unanswered(update=True) and it wouldn't detect the new question.
	I added the class StoryParent of which there will always be one instance which all stories will have as a parent.
	Now certain methods will require the use of the kw argument parent=StoryParent_key(), like for example
	Story.get_by_id kept returning None until I changed that.

	- I now have a successfully functional Story_most_recent query and Story_unanswered.


		
		
		
Ideas for the 2nd launch:
	big ideas:
	- AUDIO with soundcloud
	- Leaderboard and student stats
	- Add dictionary-lookup capability somehow
	
	little things:
	- add location property to questions
	- scroll to answer after submitting an answer
	

	

	
Cron jobs to run:
	- Delete vocab which isn't being referred to.
	- Update all the thanks at the end of the day and keep track of increment in memcache.
	
	
	

random old stuff:

